// Wheel encoder node for Raspberry Pi Pico
// Reads the wheel encoder values and publishes them to ROS2
// Micro-ROS client for Raspberry Pi Pico must be running on the same device


#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "micro_ros_utilities.hpp"
#include "std_msgs/msg/Float32.hpp"

const uint IR_SENSOR_PIN_A[] = {0, 2, 4, 6};  // GPIO Pins für Encoder 1-4
const uint IR_SENSOR_PIN_B[] = {1, 3, 5, 7};  // GPIO Pins für Encoder 1-4
const int ENCODER_COUNT = 4;
const int SLOTS_PER_ENCODER = 72;
const float WHEEL_DIAMETER_CM = 16.0f;  // Rad-Durchmesser in cm
const float CM_PER_ENCODER_SLOT = (3.14159f * WHEEL_DIAMETER_CM) / SLOTS_PER_ENCODER; // cm pro Encoder-Schlitz

volatile int counters[ENCODER_COUNT] = {0};

struct Encoder {
    int pinA;
    int pinB;
    int lastEncoded;
};

Encoder encoders[ENCODER_COUNT];

void onEncoderChange(uint encoderIndex) {
    int MSB = gpio_get(IR_SENSOR_PIN_A[encoderIndex]);
    int LSB = gpio_get(IR_SENSOR_PIN_B[encoderIndex]);

    int encodedValue = (MSB << 1) | LSB;
    int sum = (encoders[encoderIndex].lastEncoded << 2) | encodedValue;
    
    if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {
        counters[encoderIndex]++;
    } else if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {
        counters[encoderIndex]--;
    }

    encoders[encoderIndex].lastEncoded = encodedValue;
}

float calculateSpeed(int counterValue) {
    // Berechnung der Geschwindigkeit in cm/s
    return CM_PER_ENCODER_SLOT * counterValue * 10; // multipliziere mit 10 für cm/s
}

int main() {
    stdio_init_all();

    micro_ros_utilities::create_client("pico_client");

    rclcpp::Node::SharedPtr node = rclcpp::Node::make_shared("encoder_node");
    std::vector<rclcpp::Publisher<std_msgs::msg::Float32>::SharedPtr> rpm_publishers;
    std::vector<rclcpp::Publisher<std_msgs::msg::Float32>::SharedPtr> speed_publishers;

    for (int i = 0; i < ENCODER_COUNT; ++i) {
        encoders[i].pinA = IR_SENSOR_PIN_A[i];
        encoders[i].pinB = IR_SENSOR_PIN_B[i];
        encoders[i].lastEncoded = 0;

        gpio_init(encoders[i].pinA);
        gpio_set_dir(encoders[i].pinA, GPIO_IN);
        gpio_pull_up(encoders[i].pinA);

        gpio_init(encoders[i].pinB);
        gpio_set_dir(encoders[i].pinB, GPIO_IN);
        gpio_pull_up(encoders[i].pinB);

        gpio_set_irq_enabled_with_callback(encoders[i].pinA, GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, 
            reinterpret_cast<gpio_irq_callback_t>(&onEncoderChange), (void *)i);

        rpm_publishers.push_back(node->create_publisher<std_msgs::msg::Float32>("encoder_rpm_" + std::to_string(i + 1), 10));
        speed_publishers.push_back(node->create_publisher<std_msgs::msg::Float32>("encoder_speed_cm_s_" + std::to_string(i + 1), 10));
    }

    rclcpp::Rate loop_rate(10); // Adjust loop rate as needed

    while (rclcpp::ok()) {
        for (int i = 0; i < ENCODER_COUNT; ++i) {
            std_msgs::msg::Float32 rpm_msg;
            std_msgs::msg::Float32 speed_msg;

            float rpm = (counters[i] / static_cast<float>(SLOTS_PER_ENCODER)) * 60.0f;
            float speed_cm_per_s = calculateSpeed(counters[i]);

            rpm_msg.data = rpm;
            speed_msg.data = speed_cm_per_s;

            rpm_publishers[i]->publish(rpm_msg);
            speed_publishers[i]->publish(speed_msg);
        }

        loop_rate.sleep();
        rclcpp::spin_some(node);
    }

    return 0;
}
